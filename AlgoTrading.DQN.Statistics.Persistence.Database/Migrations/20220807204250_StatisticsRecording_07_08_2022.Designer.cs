// <auto-generated />
using System;
using AlgoTrading.DQN.Statistics.Persistence.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AlgoTrading.DQN.Statistics.Persistence.Database.Migrations
{
    [DbContext(typeof(LearningStatisticsDataContext))]
    [Migration("20220807204250_StatisticsRecording_07_08_2022")]
    partial class StatisticsRecording_07_08_2022
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AlgoTrading.Broker.Statistics.Persistence.Database.DTO.BrokerSessionStatisticsDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BestTradedStockId")
                        .HasColumnType("integer");

                    b.Property<int>("StocksVisited")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("TotalTradeDuration")
                        .HasColumnType("interval");

                    b.Property<decimal>("TotalTradeProfit")
                        .HasColumnType("numeric");

                    b.Property<int>("TotalTrades")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BestTradedStockId");

                    b.ToTable("BrokerSessionStatistics");
                });

            modelBuilder.Entity("AlgoTrading.Broker.Statistics.Persistence.Database.DTO.MarketPositionStatisticsDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("EndPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Profit")
                        .HasColumnType("numeric");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("StartPrice")
                        .HasColumnType("numeric");

                    b.Property<int?>("TradedStockStatisticsDTOId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TradedStockStatisticsDTOId");

                    b.ToTable("MarketPositionStatistics");
                });

            modelBuilder.Entity("AlgoTrading.Broker.Statistics.Persistence.Database.DTO.TradedStockStatisticsDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("EndPrice")
                        .HasColumnType("numeric");

                    b.Property<TimeSpan>("Interval")
                        .HasColumnType("interval");

                    b.Property<decimal>("Profit")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("StartPrice")
                        .HasColumnType("numeric");

                    b.Property<TimeSpan>("TradeDuration")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("TradedStockStatistics");
                });

            modelBuilder.Entity("AlgoTrading.DQN.Statistics.Persistence.Database.DTO.EpochStatisticsDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BrokerSessionStatisticsId")
                        .HasColumnType("integer");

                    b.Property<int>("EpochOrder")
                        .HasColumnType("integer");

                    b.Property<int>("EstimationsCount")
                        .HasColumnType("integer");

                    b.Property<double>("FinalEpsilon")
                        .HasColumnType("double precision");

                    b.Property<int>("IterationsCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LearningSessionStatisticsDTOId")
                        .HasColumnType("uuid");

                    b.Property<int>("MemoriesCount")
                        .HasColumnType("integer");

                    b.Property<double>("TotalIterationReward")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalLoss")
                        .HasColumnType("double precision");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BrokerSessionStatisticsId");

                    b.HasIndex("LearningSessionStatisticsDTOId");

                    b.ToTable("EpochStatistics");
                });

            modelBuilder.Entity("AlgoTrading.DQN.Statistics.Persistence.Database.DTO.LearningSessionStatisticsDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LearningStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TotalMemories")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("LearningStatistics");
                });

            modelBuilder.Entity("AlgoTrading.Broker.Statistics.Persistence.Database.DTO.BrokerSessionStatisticsDTO", b =>
                {
                    b.HasOne("AlgoTrading.Broker.Statistics.Persistence.Database.DTO.TradedStockStatisticsDTO", "BestTradedStock")
                        .WithMany()
                        .HasForeignKey("BestTradedStockId");

                    b.Navigation("BestTradedStock");
                });

            modelBuilder.Entity("AlgoTrading.Broker.Statistics.Persistence.Database.DTO.MarketPositionStatisticsDTO", b =>
                {
                    b.HasOne("AlgoTrading.Broker.Statistics.Persistence.Database.DTO.TradedStockStatisticsDTO", null)
                        .WithMany("Positions")
                        .HasForeignKey("TradedStockStatisticsDTOId");
                });

            modelBuilder.Entity("AlgoTrading.DQN.Statistics.Persistence.Database.DTO.EpochStatisticsDTO", b =>
                {
                    b.HasOne("AlgoTrading.Broker.Statistics.Persistence.Database.DTO.BrokerSessionStatisticsDTO", "BrokerSessionStatistics")
                        .WithMany()
                        .HasForeignKey("BrokerSessionStatisticsId");

                    b.HasOne("AlgoTrading.DQN.Statistics.Persistence.Database.DTO.LearningSessionStatisticsDTO", null)
                        .WithMany("Epochs")
                        .HasForeignKey("LearningSessionStatisticsDTOId");

                    b.Navigation("BrokerSessionStatistics");
                });

            modelBuilder.Entity("AlgoTrading.Broker.Statistics.Persistence.Database.DTO.TradedStockStatisticsDTO", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("AlgoTrading.DQN.Statistics.Persistence.Database.DTO.LearningSessionStatisticsDTO", b =>
                {
                    b.Navigation("Epochs");
                });
#pragma warning restore 612, 618
        }
    }
}
