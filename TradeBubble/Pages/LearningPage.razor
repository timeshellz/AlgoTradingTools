@page "/Learning"
@using TradeBubble.Components.Containers
@using TradeBubble.Components.Layouts
@using TradeBubble.Components.Forms;
@using TradeBubble.Components.Info;
@using Syncfusion.Blazor.Charts;
@using Syncfusion.Blazor.Grids;
@using System.Dynamic;

@using TradeBubble.ViewModels

@using AlgoTrading.Stocks;
@using AlgoTrading.Broker;
@using AlgoTrading.DQN;

@using Syncfusion.Blazor.Popups;

@inject LearningPageViewModel viewModel
@inject NavigationManager navigation

<CellPage PageTitle="Learning Dashboard">
    <ContentCell ColumnWidth="2" CellTitle="Controls">
        @if (!viewModel.IsConfigured)
        {
            <button class="btn btn-secondary w-100 mb-1" @onclick="@(() => viewModel.IsCreatingDQN = true)">
                Create
            </button>
            <button class="btn btn-secondary w-100 mb-1">
                Load
            </button>
            <span class="border-bottom mb-1"></span>
            <button class="btn btn-secondary w-100 mb-1" @onclick="@(() => navigation.NavigateTo("/StockManagement"))">
                Manage Stock Data
            </button>
        }
        else
        {
            @if (!viewModel.IsLearningRunning)
            {
                <button class="btn btn-secondary w-100 mb-1" @onclick="viewModel.SetPause">
                    Resume
                </button>
            }
            else
            {
                <button class="btn btn-secondary w-100 mb-1" @onclick="viewModel.SetPause">
                    Pause
                </button>
            }
            <button class="btn btn-secondary w-100 mb-1">
                Abort
            </button>
        }
    </ContentCell>
    <ContentCell ColumnWidth="3" CellTitle="Status">
        @if (!viewModel.IsLearningRunning)
        {
            <p>Director not running.</p>
        }
        else
        {
            <p>Running...</p>
        }
    </ContentCell>
    <ContentCell ColumnWidth="7" CellTitle="Configuration">
        @if (viewModel.AgentConfiguration != null && viewModel.BrokerConfiguration != null && viewModel.NeuralConfiguration != null)
        {
            <LearningConfigurationDisplayInfo AgentConfiguration="viewModel.AgentConfiguration"
                                              BrokerConfiguration="viewModel.BrokerConfiguration"
                                              NeuralConfiguration="viewModel.NeuralConfiguration" />
        }
        else
        {
            <p>Not configured.</p>
        }
    </ContentCell>
    @if (viewModel.IsConfigured)
    {
        <ContentCell ColumnWidth="12" CellTitle="Record Best Trade Run Statistics">
            @{
                TradedStockStatistics bestTradedStock = null;

                if (viewModel.BestEpoch != null)
                    bestTradedStock = viewModel.RecordBestTradedStock;

                if (bestTradedStock != null)
                {
                    ClosedPosition firstClosedPosition = (ClosedPosition)(bestTradedStock.Positions
                            .Where(p => p is ClosedPosition).FirstOrDefault());

                    ClosedPosition lastClosedPosition = (ClosedPosition)(bestTradedStock.Positions
                        .Where(p => p is ClosedPosition).LastOrDefault());

                    <div class="row">
                        <div class="col-4">
                            <h6>Stock</h6>
                            <p>@bestTradedStock.StockData.Identifier.Name</p>
                            <h6>Interval</h6>
                            <p>@bestTradedStock.StockData.Interval</p>
                            <h6>Start Date</h6>
                            <p>@bestTradedStock.StockData.StartDate.ToString()</p>
                            <h6>End Date</h6>
                            <p>@bestTradedStock.StockData.EndDate.ToString()</p>
                        </div>
                        <div class="col-4">
                            <h6>First Position Date</h6>
                            @if (firstClosedPosition != null)
                            {
                                <p>@firstClosedPosition.StartBar.Date</p>
                            }
                            else
                            {
                                <p>No closed positions found.</p>
                            }
                            <h6>First Close Price</h6>
                            @if (firstClosedPosition != null)
                            {
                                <p>@bestTradedStock.StockData.Bars.First().Value.Close</p>
                            }
                            else
                            {
                                <p>No closed positions found.</p>
                            }
                            <h6>Last Position Date</h6>
                            @if (lastClosedPosition != null)
                            {
                                <p>@lastClosedPosition.StartBar.Date</p>
                            }
                            else
                            {
                                <p>No closed positions found.</p>
                            }
                            <h6>Last Close Price</h6>
                            @if (lastClosedPosition != null)
                            {
                                <p>@bestTradedStock.StockData.Bars.Last().Value.Close</p>
                            }
                            else
                            {
                                <p>No closed positions found.</p>
                            }
                        </div>
                        <div class="col-4">
                            <h6>Profit</h6>
                            <p>@bestTradedStock.Profit</p>
                            <h6>Number of Trades</h6>
                            <p>@bestTradedStock.Positions.Count</p>
                        </div>
                    </div>
                    <div class="btn btn-secondary" @onclick="@(() => viewModel.IsExportingPositions = true)">Export positions</div>
                }
                else
                {
                    <p>No data available</p>
                }

            }
        </ContentCell>
        <ContentCell ColumnWidth="12" CellTitle="Last Best Trade Run Statistics">
            @{
                TradedStockStatistics bestTradedStock = null;

                if (viewModel.SkilledEpochs != null && viewModel.SkilledEpochs.Count > 0)
                {
                    bestTradedStock = viewModel.LastBestTradedStock;
                }

                if (bestTradedStock != null)
                {
                    ClosedPosition firstClosedPosition = (ClosedPosition)(bestTradedStock.Positions
                            .Where(p => p is ClosedPosition).FirstOrDefault());

                    ClosedPosition lastClosedPosition = (ClosedPosition)(bestTradedStock.Positions
                        .Where(p => p is ClosedPosition).LastOrDefault());

                    <div class="row">
                        <div class="col-4">
                            <h6>Stock</h6>
                            <p>@bestTradedStock.StockData.Identifier.Name</p>
                            <h6>Interval</h6>
                            <p>@bestTradedStock.StockData.Interval</p>
                            <h6>Start Date</h6>
                            <p>@bestTradedStock.StockData.StartDate.ToString()</p>
                            <h6>End Date</h6>
                            <p>@bestTradedStock.StockData.EndDate.ToString()</p>
                        </div>
                        <div class="col-4">
                            <h6>First Position Date</h6>
                            @if (firstClosedPosition != null)
                            {
                                <p>@firstClosedPosition.StartBar.Date</p>
                            }
                            else
                            {
                                <p>No closed positions found.</p>
                            }
                            <h6>First Close Price</h6>
                            @if (firstClosedPosition != null)
                            {
                                <p>@bestTradedStock.StockData.Bars.First().Value.Close</p>
                            }
                            else
                            {
                                <p>No closed positions found.</p>
                            }
                            <h6>Last Position Date</h6>
                            @if (lastClosedPosition != null)
                            {
                                <p>@lastClosedPosition.StartBar.Date</p>
                            }
                            else
                            {
                                <p>No closed positions found.</p>
                            }
                            <h6>Last Close Price</h6>
                            @if (lastClosedPosition != null)
                            {
                                <p>@bestTradedStock.StockData.Bars.Last().Value.Close</p>
                            }
                            else
                            {
                                <p>No closed positions found.</p>
                            }
                        </div>
                        <div class="col-4">
                            <h6>Profit</h6>
                            <p>@bestTradedStock.Profit</p>
                            <h6>Number of Trades</h6>
                            <p>@bestTradedStock.Positions.Count</p>
                        </div>
                    </div>
                }
                else
                {
                    <p>No data available</p>
                }

            }
        </ContentCell>
        <ContentCell ColumnWidth="6">
            <SfChart Title="Best Trade Runs (Learning)">
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@viewModel.LearningEpochs.Where(e => e.Value.BrokerSessionStatistics.BestTradedStock != null).Select(e =>
                                              {
                                                  dynamic d = new ExpandoObject();
                                                  d.X = e.Key;
                                                  d.Y = e.Value.BrokerSessionStatistics.BestTradedStock.Profit;

                                                  return d;
                                              }
                                              )" EnableComplexProperty="true"
                                 XName="X"
                                 YName="Y"
                                 Type="ChartSeriesType.Line" Fill="#0000BB">
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </ContentCell>
        <ContentCell ColumnWidth="6">
            <SfChart Title="Best Trade Runs (Skilled)">
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@viewModel.SkilledEpochs.Where(e => e.Value.BrokerSessionStatistics.BestTradedStock != null).Select(e =>
                                              {
                                                  dynamic d = new ExpandoObject();
                                                  d.X = e.Key;
                                                  d.Y = e.Value.BrokerSessionStatistics.BestTradedStock.Profit;

                                                  return d;
                                              }
                                              )" EnableComplexProperty="true"
                                 XName="X"
                                 YName="Y"
                                 Type="ChartSeriesType.Line" Fill="#BB0000">
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </ContentCell>
        <ContentCell ColumnWidth="12">
            <SfChart Title="Total Learning Reward">
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@viewModel.LearningEpochs.Values"
                                 XName="@nameof(EpochStatistics.EpochID)"
                                 YName="@nameof(EpochStatistics.TotalIterationReward)"
                                 Type="ChartSeriesType.Line" Fill="#0000BB">
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </ContentCell>
        <ContentCell ColumnWidth="12">
            <SfChart Title="Total Skilled Reward">
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@viewModel.SkilledEpochs.Values"
                                 XName="@nameof(EpochStatistics.EpochID)"
                                 YName="@nameof(EpochStatistics.TotalIterationReward)"
                                 Type="ChartSeriesType.Line" Fill="#BB0000">
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </ContentCell>
        <ContentCell ColumnWidth="6">
            <SfChart Title="Average Loss">
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@viewModel.LearningEpochs.Values"
                                 XName="@nameof(EpochStatistics.EpochID)"
                                 YName="@nameof(EpochStatistics.AverageLoss)"
                                 Type="ChartSeriesType.Line" Fill="#0000BB">
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </ContentCell>
        <ContentCell ColumnWidth="6">
            <SfChart Title="Epsilon">
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@viewModel.LearningEpochs.Values"
                                 XName="@nameof(EpochStatistics.EpochID)"
                                 YName="@nameof(EpochStatistics.FinalEpsilon)"
                                 Type="ChartSeriesType.Line" Fill="#0000BB">
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </ContentCell>
        <ContentCell ColumnWidth="4">
            <SfChart Title="Average Trade Duration">
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@viewModel.LearningEpochs.Select(e =>
                                              {
                                                  dynamic d = new ExpandoObject();
                                                  d.X = e.Key;
                                                  d.Y = e.Value.BrokerSessionStatistics.AverageTradeDuration.TotalHours;

                                                  return d;
                                              }
                                              )" EnableComplexProperty="true"
                                 XName="X"
                                 YName="Y"
                                 Type="ChartSeriesType.Scatter" Fill="#0000BB">
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </ContentCell>
        <ContentCell ColumnWidth="4">
            <SfChart Title="Average Trade Profit">
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@viewModel.LearningEpochs.Select(e =>
                                              {
                                                  dynamic d = new ExpandoObject();
                                                  d.X = e.Key;
                                                  d.Y = e.Value.BrokerSessionStatistics.AverageTradeProfit;

                                                  return d;
                                              }
                                              )" EnableComplexProperty="true"
                                 XName="X"
                                 YName="Y"
                                 Type="ChartSeriesType.Line" Fill="#0000BB">
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </ContentCell>
        <ContentCell ColumnWidth="4">
            <SfChart Title="Number of Trades">
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@viewModel.LearningEpochs.Select(e =>
                                              {
                                                  dynamic d = new ExpandoObject();
                                                  d.X = e.Key;
                                                  d.Y = e.Value.BrokerSessionStatistics.TotalTrades;

                                                  return d;
                                              }
                                              )" EnableComplexProperty="true"
                                 XName="X"
                                 YName="Y"
                                 Type="ChartSeriesType.Line" Fill="#0000BB">
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </ContentCell>
        <ContentCell ColumnWidth="4">
            <SfChart Title="Average Trade Duration (Skilled)">
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@viewModel.SkilledEpochs.Select(e =>
                                              {
                                                  dynamic d = new ExpandoObject();
                                                  d.X = e.Key;
                                                  d.Y = e.Value.BrokerSessionStatistics.AverageTradeDuration.TotalHours;

                                                  return d;
                                              }
                                              )" EnableComplexProperty="true"
                                 XName="X"
                                 YName="Y"
                                 Type="ChartSeriesType.Scatter" Fill="#BB0000">
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </ContentCell>
        <ContentCell ColumnWidth="4">
            <SfChart Title="Average Trade Profit (Skilled)">
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@viewModel.SkilledEpochs.Select(e =>
                                              {
                                                  dynamic d = new ExpandoObject();
                                                  d.X = e.Key;
                                                  d.Y = e.Value.BrokerSessionStatistics.AverageTradeProfit;

                                                  return d;
                                              }
                                              )" EnableComplexProperty="true"
                                 XName="X"
                                 YName="Y"
                                 Type="ChartSeriesType.Line" Fill="#BB0000">
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </ContentCell>
        <ContentCell ColumnWidth="4">
            <SfChart Title="Number of Trades (Skilled)">
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@viewModel.SkilledEpochs.Select(e =>
                                              {
                                                  dynamic d = new ExpandoObject();
                                                  d.X = e.Key;
                                                  d.Y = e.Value.BrokerSessionStatistics.TotalTrades;

                                                  return d;
                                              }
                                              )" EnableComplexProperty="true"
                                 XName="X"
                                 YName="Y"
                                 Type="ChartSeriesType.Line" Fill="#BB0000">
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </ContentCell>
    }
</CellPage>

<SfDialog Height="95vh" Width="80%" Header="DQN Setup" Visible="viewModel.IsCreatingDQN" IsModal="true" MinHeight="95vh">
    @if (viewModel.CurrentSetupState == LearningPageViewModel.SetupState.CreateNew)
    {
        <DQNSettingsEditForm AgentSettings="viewModel.AgentConfiguration"
                             BrokerSettings="viewModel.BrokerConfiguration"
                             NeuralSettings="viewModel.NeuralConfiguration" />
    }

    @if (viewModel.CurrentSetupState == LearningPageViewModel.SetupState.SelectStocks)
    {
        <SelectStocksForm @ref="form"
                          AvailableStocks=@viewModel.DisplayedStocks
                          SelectedStocks="@viewModel.SelectedStocks" />
    }
    <DialogButtons>
        <DialogButton Content="Confirm" OnClick="@(() => viewModel.AdvanceSetup())" />
        <DialogButton Content="Cancel" OnClick="@(() => viewModel.BacktrackSetup())" />
    </DialogButtons>
</SfDialog>

@if (viewModel.RecordBestTradedStock != null && viewModel.RecordBestTradedStock.Positions != null)
{
    <SfDialog Header="Export Positions" @bind-Visible="viewModel.IsExportingPositions" IsModal="true">
        <SfGrid ID="exportGrid" @ref="exportGrid" DataSource="viewModel.RecordBestTradedStock.Positions.Where(p => p is ClosedPosition)"
                Toolbar="@(new List<string>() { "ExcelExport" })"
                AllowPaging="true"
                AllowExcelExport="true">
            <GridEvents OnToolbarClick="ExportGridToolbarClicked" TValue="MarketPosition"></GridEvents>
            <GridPageSettings PageSize="10" />
            <GridColumns>
                <GridColumn Field="@($"{nameof(ClosedPosition.StartBar)}.{nameof(StockBar.Date)}")" />
                <GridColumn Field="@($"{nameof(ClosedPosition.EndBar)}.{nameof(StockBar.Date)}")" />
                <GridColumn Field="@($"{nameof(ClosedPosition.Size)}")" />
                <GridColumn Field="@($"{nameof(ClosedPosition.OpeningValue)}")" />
                <GridColumn Field="@($"{nameof(ClosedPosition.CloseValue)}")" />
                <GridColumn Field="@($"{nameof(ClosedPosition.ValueChange)}")" />
                <GridColumn Field="@($"{nameof(ClosedPosition.CommissionedProfit)}")" />
            </GridColumns>
        </SfGrid>
        <DialogButtons>
            <DialogButton Content="Close" OnClick="@(() => viewModel.IsExportingPositions = false)" />
        </DialogButtons>
    </SfDialog>
}


@code
{
    private List<IntervalStockIdentifier> displayedAvailableStocks = new List<IntervalStockIdentifier>();
    private SelectStocksForm form;
    private SfGrid<MarketPosition> exportGrid;

    protected override async Task OnInitializedAsync()
    {
        await viewModel.InitializeAsync();

        viewModel.PropertyChanged += async (sender, e) =>
        {
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };
    }

    public async Task ExportGridToolbarClicked(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "exportGrid_excelexport")
            await exportGrid.ExcelExport();
    }
}